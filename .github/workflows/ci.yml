name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Generate semantic version for the build
  version:
    name: Generate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semver.outputs.semantic_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0  # Required for semantic version generation

      - name: Generate semantic version
        id: semver
        uses: lukaszraczylo/semver-generator@3704fdfb2c7ca95f2d20e5a648ccf50c87a37846 # v1
        with:
          config_file: semver.yaml
          repository_local: true
          strict: false
          existing: true

      - name: Display generated version
        run: echo "Generated version:${{ steps.semver.outputs.semantic_version }}"

  test:
    name: Build and Test
    runs-on: macos-latest
    needs: version
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Swift
        uses: swift-actions/setup-swift@682457186b71c25a884c45c06f859febbe259240 # v2

      - name: Show Swift version
        run: swift --version | cat

      - name: Cache SwiftPM build
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Build (debug)
        env:
          AUDIOCAP_VERSION: ${{ needs.version.outputs.version }}
          AUDIOCAP_GIT_COMMIT: ${{ github.sha }}
          AUDIOCAP_BUILD_DATE: ${{ github.event.head_commit.timestamp }}
        run: swift build | cat

      - name: Test (with coverage)
        env:
          AUDIOCAP_VERSION: ${{ needs.version.outputs.version }}
          AUDIOCAP_GIT_COMMIT: ${{ github.sha }}
          AUDIOCAP_BUILD_DATE: ${{ github.event.head_commit.timestamp }}
        run: swift test --enable-code-coverage | cat

      - name: Generate code coverage report
        run: |
          LLVM_COV="$(dirname $(which swift))/llvm-cov"
          PROFDATA=$(find .build -name "*.profdata" | head -1)
          TEST_BINARY=$(find .build -name "*PackageTests.xctest" | head -1)/Contents/MacOS/*
          
          $LLVM_COV export -format="lcov" -instr-profile="$PROFDATA" $TEST_BINARY -ignore-filename-regex=".build|Tests" > coverage.lcov

      - name: Generate Coverage Summary
        run: |
          if [ ! -f coverage.lcov ]; then
            echo "Error: No coverage.lcov file found"
            exit 1
          fi
          
          echo "📊 Code Coverage Report" > coverage_summary.md
          echo "" >> coverage_summary.md
          
          # Parse LCOV file for basic metrics
          LINES_FOUND=$(awk -F: '/^LF:/{sum+=$2} END {print sum+0}' coverage.lcov)
          LINES_HIT=$(awk -F: '/^LH:/{sum+=$2} END {print sum+0}' coverage.lcov)
          FUNCTIONS_FOUND=$(awk -F: '/^FNF:/{sum+=$2} END {print sum+0}' coverage.lcov)
          FUNCTIONS_HIT=$(awk -F: '/^FNH:/{sum+=$2} END {print sum+0}' coverage.lcov)
          BRANCHES_FOUND=$(awk -F: '/^BRF:/{sum+=$2} END {print sum+0}' coverage.lcov)
          BRANCHES_HIT=$(awk -F: '/^BRH:/{sum+=$2} END {print sum+0}' coverage.lcov)
          
          if [ "$LINES_FOUND" -gt 0 ]; then
            LINE_COVERAGE=$(echo "scale=1; $LINES_HIT * 100 / $LINES_FOUND" | bc -l)
          else
            LINE_COVERAGE="0.0"
          fi
          
          if [ "$FUNCTIONS_FOUND" -gt 0 ]; then
            FUNCTION_COVERAGE=$(echo "scale=1; $FUNCTIONS_HIT * 100 / $FUNCTIONS_FOUND" | bc -l)
          else
            FUNCTION_COVERAGE="0.0"
          fi
          
          if [ "$BRANCHES_FOUND" -gt 0 ]; then
            BRANCH_COVERAGE=$(echo "scale=1; $BRANCHES_HIT * 100 / $BRANCHES_FOUND" | bc -l)
          else
            BRANCH_COVERAGE="0.0"
          fi
          
          # Determine coverage badge color
          if (( $(echo "$LINE_COVERAGE >= 80" | bc -l) )); then
            BADGE_COLOR="brightgreen"
            STATUS_ICON="✅"
          elif (( $(echo "$LINE_COVERAGE >= 60" | bc -l) )); then
            BADGE_COLOR="yellow" 
            STATUS_ICON="⚠️"
          else
            BADGE_COLOR="red"
            STATUS_ICON="❌"
          fi
          
          echo "| Metric | Coverage | Lines |" >> coverage_summary.md
          echo "|--------|----------|-------|" >> coverage_summary.md
          echo "| $STATUS_ICON **Line Coverage** | **${LINE_COVERAGE}%** | $LINES_HIT / $LINES_FOUND |" >> coverage_summary.md
          echo "| 🔧 **Function Coverage** | **${FUNCTION_COVERAGE}%** | $FUNCTIONS_HIT / $FUNCTIONS_FOUND |" >> coverage_summary.md
          echo "| 🌿 **Branch Coverage** | **${BRANCH_COVERAGE}%** | $BRANCHES_HIT / $BRANCHES_FOUND |" >> coverage_summary.md
          echo "" >> coverage_summary.md
          echo "![Coverage Badge](https://img.shields.io/badge/coverage-${LINE_COVERAGE}%25-${BADGE_COLOR})" >> coverage_summary.md

      - name: Update PR Body with Coverage Summary
        if: github.event_name == 'pull_request'
        run: |
          if [ ! -f coverage_summary.md ]; then
            echo "coverage_summary.md not found; skipping"
            exit 0
          fi

          gh pr view ${{ github.event.number }} --json body -q .body > pr_body.md || echo "" > pr_body.md

          {
            echo "<!-- COVERAGE-START -->"
            echo "### 📊 Code Coverage"
            echo ""
            cat coverage_summary.md
            echo ""
            echo "<!-- COVERAGE-END -->"
          } > coverage_block.md

          if grep -q "<!-- COVERAGE-START -->" pr_body.md; then
            awk 'BEGIN{skip=0} /<!-- COVERAGE-START -->/{skip=1} skip==0{print} /<!-- COVERAGE-END -->/{skip=0}' pr_body.md > pr_body_clean.md
          else
            cp pr_body.md pr_body_clean.md
          fi

          printf "\n\n" >> pr_body_clean.md
          cat coverage_block.md >> pr_body_clean.md

          gh pr edit ${{ github.event.number }} --body-file pr_body_clean.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test version command
        env:
          AUDIOCAP_VERSION: ${{ needs.version.outputs.version }}
          AUDIOCAP_GIT_COMMIT: ${{ github.sha }}
          AUDIOCAP_BUILD_DATE: ${{ github.event.head_commit.timestamp }}
        run: .build/debug/audiocap-recorder --version

      - name: Upload debug binary artifact
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: audiocap-recorder-debug-${{ github.sha }}
          path: .build/debug/audiocap-recorder
          if-no-files-found: ignore

  build-release:
    name: Build Release Binary
    runs-on: macos-latest
    needs: [version, test]
    outputs:
      version: ${{ needs.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Swift
        uses: swift-actions/setup-swift@682457186b71c25a884c45c06f859febbe259240 # v2

      - name: Cache SwiftPM build
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Build (release)
        env:
          AUDIOCAP_VERSION: ${{ needs.version.outputs.version }}
          AUDIOCAP_GIT_COMMIT: ${{ github.sha }}
          AUDIOCAP_BUILD_DATE: ${{ github.event.head_commit.timestamp }}
        run: swift build -c release | cat

      - name: Test release version command
        env:
          AUDIOCAP_VERSION: ${{ needs.version.outputs.version }}
          AUDIOCAP_GIT_COMMIT: ${{ github.sha }}
          AUDIOCAP_BUILD_DATE: ${{ github.event.head_commit.timestamp }}
        run: .build/release/audiocap-recorder --version

      - name: Strip and prepare binary
        run: |
          strip .build/release/audiocap-recorder
          mkdir -p release
          cp .build/release/audiocap-recorder release/audiocap-recorder-${{ needs.version.outputs.version }}-macos
          
      - name: Upload release binary artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: audiocap-recorder-release-${{ needs.version.outputs.version }}
          path: release/audiocap-recorder-${{ needs.version.outputs.version }}-macos
          if-no-files-found: error

  # Create release only on main branch pushes (not PRs)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [version, build-release]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Download release binary
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: audiocap-recorder-release-${{ needs.version.outputs.version }}
          path: ./release

      - name: Generate release notes
        id: release_notes
        run: |
          echo "Creating release notes for version ${{ needs.version.outputs.version }}"
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            echo "## Changes since $LAST_TAG" > release_notes.md
            echo "" >> release_notes.md
            git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges >> release_notes.md
          else
            echo "## Initial Release" > release_notes.md
            echo "" >> release_notes.md
            echo "First release of audiocap-recorder with semantic versioning." >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "## Features" >> release_notes.md
          echo "- High-performance macOS audio capture" >> release_notes.md
          echo "- Process filtering with regex patterns" >> release_notes.md
          echo "- Multi-channel input support (up to 8 channels)" >> release_notes.md
          echo "- Multiple compression formats: ALAC, AAC, MP3" >> release_notes.md
          echo "- Professional CLI interface" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "Download the binary, make it executable, and run:" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo 'chmod +x audiocap-recorder-${{ needs.version.outputs.version }}-macos' >> release_notes.md
          echo './audiocap-recorder-${{ needs.version.outputs.version }}-macos --help' >> release_notes.md
          echo '```' >> release_notes.md

      - name: Create GitHub Release with tag
        run: |
          gh release create "v${{ needs.version.outputs.version }}" \
            --title "Release v${{ needs.version.outputs.version }}" \
            --notes-file release_notes.md \
            release/audiocap-recorder-${{ needs.version.outputs.version }}-macos
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
